#!/bin/bash
#
# /etc/systemd/system/vasilisa.service lanza Vasilisa en cada arranque.
#
# El script es responsable de algunas tareas de mantenimiento:
#
# - Publica algunas métricas para Prometheus
#
# - Si el espacio disponible está por debajo del umbral borra los ficheros
#   en el directorio descargas y en la papelera de cada usuario.
#
# - Si LXD está instalado detiene cada uno de los contenedores encendidos.
#
# - Si hay iconos de usuario personalizados en /var/lib/AccountsService/icons
#   los borra.
#
# - Si hay datasets que eran el home de usuarios antiguos se destruyen.
#
# - Si hay actualizaciones flatpak las aplica.
#


THRESHOLD=209715200 # 200GiB
DOWNLOAD_DIR='Baixades'

SCRIPT=`basename $0`

function log () {
        logger -t $SCRIPT $1
}

log "There is something to do?"

#
# Métricas para Prometheus
#
NODE_EXPORTER_DIR='/var/lib/prometheus/node-exporter'
if [ -d $NODE_EXPORTER_DIR ]
then
	FILE='misc.prom'
	CPU_MODEL_NAME=`cat /proc/cpuinfo | grep "model name" | head -n 1 | cut -d':' -f2`
	CPU_CORES=`cat /proc/cpuinfo | grep "cpu cores" | head -n 1 | cut -d':' -f2`
	STARTUP_FINISHED=`systemd-analyze | head -n1 | cut -d'=' -f2`

	echo "# HELP misc_labels Labeled information as provided by /proc/cpuinfo." >$NODE_EXPORTER_DIR/$FILE
	echo "# TYPE misc_labels gauge" >>$NODE_EXPORTER_DIR/$FILE
	echo "misc_labels{cpu=\"$CPU_MODEL_NAME\",cores=\"$CPU_CORES\",startup=\"$STARTUP_FINISHED\"} 1" >>$NODE_EXPORTER_DIR/$FILE
fi

DISK_FREE=`df | grep -E \/$ | sed "s/  */ /g" | cut -f4 -d' ' | cut -f1 -d'%'`
log "Disk free: $DISK_FREE Threshold: $THRESHOLD"

if [ $DISK_FREE -le $THRESHOLD ]
then
	log "Disk free under threshold. Deleting files in $DOWNLOAD_DIR & empty trash for every user."	

	for user in `ls /home`
	do
		# Empty $DOWNLOAD_DIR
		download_dir="/home/$user/$DOWNLOAD_DIR"
		if [ -d $download_dir ]
		then
			size=`du -hs $download_dir 2>/dev/null`
			log "removing $size"
			rm -rf $download_dir/*
			log "removed"
		fi

		# Delete Trash
		trash_dir="/home/$user/.local/share/Trash"
		if [ -d $trash_dir ]
		then
			size=`du -hs $trash_dir 2>/dev/null`
			log "removing $size"
			rm -rf $trash_dir
			log "removed"
		fi
	done

	log "No more users"
	DISK_FREE=`df -h | grep -E \/$ | sed "s/  */ /g" | cut -f5 -d' ' | cut -f1 -d'%'`

	# Clean apt cache
	log "apt-get clean"
	apt-get clean

	log "Final disk usage: $DISK_FREE%"
fi

#
# Checks for LXD RUNNING containers to stop
#
LXC="/snap/bin/lxc"
if [ -f $LXC ]
then
	log "There are LXD running containers?"

	# We need to wait for lxd containers
	sleep 60

	for container in `$LXC list -c n,s --format csv | grep RUNNING | cut -f1 -d','`
	do
		# Stop container
		log "Stop container $container"
		$LXC stop $container && log "Stopped $container"
	done

fi

#
# Delete user icons
#
ICONSDIR="/var/lib/AccountsService/icons"
for x in `ls $ICONSDIR`
do
	log "Deleting $ICONSDIR/$x"
	rm $ICONSDIR/$x
done

#
# Borra los datasets que servían de home de los directorios que ya no existen.
#
# No conviene borrar los datasets de usuarios que se han borrado pues todavía
# pueden estar referenciados desde estados de zsys.
#
# https://didrocks.fr/2020/05/26/zfs-focus-on-ubuntu-20.04-lts-zsys-general-presentation/
#
# if [ -f /usr/sbin/zfs ]
# then
# 	zfs list -r rpool/USERDATA | grep /home | while read -r line
# 	do
# 		DATASET=$(echo "$line" |  cut -d' ' -f1)
# 		USER=$(echo "$line" | cut -d/ -f5)
		
# 		if ! < /etc/passwd grep -E "^$USER:" >/dev/null
# 		then
# 			log "El usuario $USER no existe, eliminando el dataset: $DATASET"
# 			zfs destroy -r "$DATASET" && log "Eliminado el dataset: $DATASET"
# 		fi
# 	done
# fi

#
# Actualizaciones flatpak
#

if [ -f /usr/bin/flatpak ]
then
	log "Comprobando actualizaciones flatpak"
	flatpak -y update
	log "Actualizaciones flatpak aplicadas"
fi

log "There is nothing more to do."
